// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId             String                 @unique
  email                   String                 @unique
  createdAt               DateTime               @default(now())
  name                    String
  membership              Membership[]
  whatsappNumber          String?
  marketingData           MarketingData?
  payment                 Payment[]
  emailNotification       EmailNotification?
  telegram                Telegram?
  websiteComment          WebsiteComment[]
  websiteCommentReply     WebsiteCommentReply[]
  notionPageId            String?
  photoUrl                String?
  watchCourses            WatchCourses[]
  watchAnalisis           WatchAnalisis[]
  watchAnalisisNonEmiten  WatchAnalisisNonEmiten[]
}

model Membership {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  startDate             DateTime
  endDate               DateTime
  tier                  MembershipTier
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @db.ObjectId
  payment               Payment?
  reminderExpired       Boolean                @default(false)
  expiredNotice         Boolean                @default(false)
}

model Prices {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  tier                  MembershipTier
  price                 Int
  duration              Int
}

model Payment {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @db.ObjectId
  membership            Membership?            @relation(fields: [membershipId], references: [id])
  membershipId          String?                @unique @db.ObjectId
  tier                  MembershipTier
  payment_type          String
  status_code           String
  transaction_status    String
  transaction_id        String                 @unique
  order_id              String                 @unique
  deferId               String?
}

enum MembershipTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model EmailNotification {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @unique @db.ObjectId
  monthlyRecap          Boolean                 @default(true)
  weeklyRecap           Boolean                 @default(true)
  buySell               Boolean                 @default(true)
  newDivident           Boolean                 @default(true)
  newAnalisis           Boolean                 @default(true)
  newCourse             Boolean                 @default(true)
}

model MarketingData {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @unique @db.ObjectId
  knowOrigin            String?
}

model ReturnVsIndex {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  startPeriod           DateTime
  endPeriod             DateTime
  period                String                  @unique
  supercuan             Float
  ihsg                  Float
  lq45                  Float
}

// Data-data saham

// Data industry
model Industry {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String                  @unique
  hexCode               String                  @unique
  emiten                Emiten[]
}

// Data emiten
model Emiten {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  industry              Industry                @relation(fields: [industryId], references: [id])
  industryId            String                  @db.ObjectId
  stockTransaction      StockTransaction[]
  stockDivident         StockDivident[]
  analisis              Analisis[]
  namaPT                String
  kodeEmiten            String                  @unique
  description           String
}

model StockTransaction {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  emiten                Emiten                  @relation(fields: [emitenId], references: [id])
  emitenId              String                  @db.ObjectId
  type                  BuyOrSell
  lot                   Int
  price                 Int
  time                  DateTime                @default(now())
}

model StockDivident {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  emiten                Emiten                  @relation(fields: [emitenId], references: [id])
  emitenId              String                  @db.ObjectId
  dps                   Int
  time                  DateTime                @default(now())
}

enum BuyOrSell {
  BUY
  SELL
}

model Analisis {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  emiten                Emiten                  @relation(fields: [emitenId], references: [id])
  emitenId              String                  @db.ObjectId
  minRead               Int
  title                 String                  @unique
  subtitle              String
  content               String
  createdDate           DateTime                @default(now())
  updatedTime           DateTime?
  watchAnalisis         WatchAnalisis[]
}

model WatchAnalisis {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @db.ObjectId
  analisis              Analisis                @relation(fields: [analisisId], references: [id])
  analisisId            String                  @db.ObjectId
  watchedAt             DateTime                @default(now())
}

model AnalisisNonEmiten {
  id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
  minRead                 Int
  title                   String                  @unique
  subtitle                String
  content                 String
  createdDate             DateTime                @default(now())
  updatedTime             DateTime?
  watchAnalisisNonEmiten  WatchAnalisisNonEmiten[]
}

model WatchAnalisisNonEmiten {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @db.ObjectId
  analisisNonEmiten     AnalisisNonEmiten       @relation(fields: [analisisNonEmitenId], references: [id])
  analisisNonEmitenId   String                  @db.ObjectId
  watchedAt             DateTime                @default(now())
}

model Telegram {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @unique @db.ObjectId
  auth_date             DateTime
  first_name            String
  last_name             String?
  telegramUserId        String                  @unique
  username              String?
  photo_url             String?
}

model WebsiteComment {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @db.ObjectId
  createdAt             DateTime                @default(now())
  comment               String
  websiteCommentReply   WebsiteCommentReply[]
}

model WebsiteCommentReply {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @db.ObjectId
  websiteComment        WebsiteComment          @relation(fields: [websiteCommentId], references: [id])
  websiteCommentId      String                  @db.ObjectId
  createdAt             DateTime                @default(now())
  comment               String
}

model PublicArticle {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  path                  String                  @unique
  title                 String                  @unique
  content               String
  minRead               Int
  createdDate           DateTime                @default(now())
  metaUrl               String                  @unique
}

model Courses {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  title                 String                  @unique
  subtitle              String
  markAs                String?
  videoLink             String                  @unique
  createdAt             DateTime                @default(now())
  watchCourses          WatchCourses[]
}

model WatchCourses {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User                    @relation(fields: [userId], references: [id])
  userId                String                  @db.ObjectId
  course                Courses                 @relation(fields: [courseId], references: [id])
  courseId              String                  @db.ObjectId
  watchedAt             DateTime                @default(now())
}

model ReturnData {
  id                              String                  @id @default(auto()) @map("_id") @db.ObjectId
  date                            DateTime                @unique
  totalAssetValue                 Float
  currentFloatingProfit           Float
  realizedProfit                  Float
  dividentIncome                  Float
  yield                           Float
  totalAssetValueWithoutDeposit   Float
  totalCashDeposited              Float
}

model Cash {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  amount                Float
  time                  DateTime                @default(now())
  type                  CashType
}

enum CashType {
  DEPOSIT
  WITHDRAW
  OUT_TRANSACTION
  IN_TRANSACTION
  IN_DIVIDEN
}